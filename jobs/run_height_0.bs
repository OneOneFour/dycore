#!/bin/bash
#
#SBATCH --job-name=dycore
#SBATCH --ntasks=8
#SBATCH --partition=twohour
#SBATCH --output=dycore_height_0.%j.out
#SBATCH --error=dycore_height_0.%j.err
#
###SBATCH --ntasks-per-node=8
#
# General Descripiton:
#  This is a sample script to run a dycore-spectral model on Mazama HPC. The script can be fairly easily modified
#  to run in another environment, particularly an HPC environment that uses LMOD for software, and particularly the OHPC SW stack.
#  Note the sample scripts that came with the package (for me at least) included compiling the code and then running
# from a local executable... which seemed sort of silly. This version references the compiled executable via
#  environment variables. The code has been successfully compile using the Intel/19 compilers and openmpi3, mpich3, and impi.
#  gnu compilers have not (yet) been tested.
#
#
module purge
module load intel/19
COMP="intel19"
module load openmpi_3/3.1.4
MPI="openmpi3"
# module load mpich_3/
# MPI="mpich3"
# module load impi_19/
# MPI="impi19"
#
module load dycore/
#
###############################################
# User defined variables:
# user variables:

#
DO_RESTART=1
RUN_TIME_DAYS=400
DT_ATMOS=600
# some initial values for variable parameters:
PRAM_INITIAL_TEMP=274.0
PRAM_INITIAL_PERTURBATION=1.0e-7
PRAM_IP_STEP=5.0e-9         # PRAM_INITIAL_PERTURBATION=PRAM_INITIAL_PERTURBATION + SLURM_JOB_ID*PRAM_IP_STEP
PRAM_GAUSS_TOPO_HEIGHT=0.0
EXPERIMENT_NAME="height_${PRAM_GAUSS_TOPO_HEIGHT}"     # will (or can be) part of working directory definition (see WORK_DIR below)
#
# N Processors:
if [[ ! -z ${SLURM_NTASKS} ]]; then
    NPES=${SLURM_NTASKS}
else
    NPES=8
fi
if [[ -z ${NPES} ]]; then NPES=8; fi
#
# Actual computations and data will happen in WORK_DIR:
#ROOT_DIR="`cd ..;pwd`"
ROOT_DIR="`pwd`"
WORK_DIR="${ROOT_DIR}/workdir_${EXPERIMENT_NAME}"
echo "WORK_DIR: ${WORK_DIR}"
#
# Simulator setup variables; these get copied into input.nml
# (you should not need to edit these for individual perturbation runs, but you might make changes to
#  re-define your environment. These variables define some physical constants and other bits).
#
NAME_LIST=${DYCORE_DIR}/input/spectral_namelist
DIAG_TABLE=${DYCORE_DIR}/input/hs_diag_table
FIELD_TABLE=${DYCORE_DIR}/input/spectral_field_table
#
###################
# Job Array handler:
#
# math in bash is a little bit tricky.
# This is a common method but it seems to be inconsistent and picky about small < 1 numbers (likely just in the display, but still...)
# example: `echo "3.1+2.2"|bc`
# we can be more explicit by using the printf() function:
# awk "BEGIN {printf \"%.9f\n\", 2e-7 * 2.1}"
#
if [[ ! -z ${SLURM_ARRAY_TASK_ID} ]]; then
    echo "Setting up array: [${SLURM_ARRAY_TASK_ID}]"
    #PRAM_INITIAL_TEMP = `echo "${PRAM_INITIAL_TEMP} + ${SLURM_ARRAY_TASK_ID}"|bc`
    #V2=$(awk "BEGIN {printf \"%.9f\n\", 2e-7 * 2.1}")
    #
    #PRAM_INITIAL_TEMP=$(awk "BEGIN {printf \"%.9f\n\", ${PRAM_INITIAL_TEMP} + ${SLURM_ARRAY_TASK_ID}} ")
    PRAM_INITIAL_PERTURBATION=$(awk "BEGIN {printf \"%.9E\n\", ${PRAM_INITIAL_PERTURBATION} + ${PRAM_IP_STEP}*${SLURM_ARRAY_TASK_ID} } ")
    #
    WORK_DIR=${WORK_DIR}/ary_${SLURM_ARRAY_TASK_ID}
    #
    echo "WORK_DIR(ary): ${WORK_DIR}"
fi
#######################
#
# CAREFULL!!!
# If doing a resrtaert, move files. If not, clean up an restart.a
if [[ DO_RESTART -eq 1 ]]; then
    if [[ ! -d ${WORK_DIR} ]]; then mkdir -p ${WORK_DIR}; fi
    cd ${WORK_DIR}
    #
    # remove INPUT?
    #if [[ -d INPUT ]]; then rm -rf INPUT/*; fi
    if [[ ! -d INPUT ]]; then mkdir INPUT; fi
    mv RESTART INPUT
    mkdir RESTART
else
    if [[ -d ${WORK_DIR} ]]; then rm -rf ${WORK_DIR}; fi
    #
    if [[ ! -d ${WORK_DIR} ]]; then mkdir -p ${WORK_DIR}; fi
    mkdir ${WORK_DIR}/INPUT
    mkdir ${WORK_DIR}/RESTART
fi
#
#--------------------------------------------------
# switch to $WORK_DIR
# construct an input.nml file
# run the MPI application
# consolidate outputs
#
# Construct the necessary inputs; put them into ${WORK_DIR}
cd ${WORK_DIR}
#
# write a little info-file:
cat > run_info.txt << EOF
# Dycore Run information
#
PRAM_GAUSS_TOPO_HEIGHT=${PRAM_GAUSS_TOPO_HEIGHT}
PRAM_INITIAL_PERTURBATION=${PRAM_INITIAL_PERTURBATION}
PRAM_IP_STEP=${PRAM_IP_STEP}
SLURM_ARRAY_TASK_ID=${SLURM_ARRAY_TASK_ID}
EOF
#
# create an input.nml file and ...
# set run length and time step, get input data and executable
if [[ ! -f input.nml ]]; then
cat > input.nml << EOF
&main_nml
     days   = ${RUN_TIME_DAYS},
     dt_atmos = ${DT_ATMOS} /

&spectral_init_cond_nml initial_temperature = ${PRAM_INITIAL_TEMP}, initial_perturbation = ${PRAM_INITIAL_PERTURBATION} /

&gaussian_topog_nml height = ${PRAM_GAUSS_TOPO_HEIGHT} /
EOF

cat ${NAME_LIST} >> input.nml
fi
#
# now, pull configuration data from the DyCore source into the input:
if [[ ! -f diag_table ]]; then
    cp ${DIAG_TABLE} diag_table
fi
if [[ ! -f field_table ]]; then
    cp ${FIELD_TABLE} field_table
fi
#
# input file constructed. Now run the program(s):
#
#exit 1
#
ulimit -s unlimited
#
mpirun -np ${NPES} fms.x
#srun -n ${NPES} fms.x
#
if [[ $? -neq 0 ]]; then
    exit 1
fi
#
# combine netcdf files
if [[ ${NPES} -gt 1 ]]; then
  for ncfile in $( ls *.nc.0000 )
  do
    ${DYCORE_MPPNCCOMBINE}  -v -r $ncfile
  done
fi
#
